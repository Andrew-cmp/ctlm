from tvm import tir
from common import save_sch_mod
def apply_trace(sch: tir.Schedule) -> None:
  b0 = sch.get_block(name="compute", func_name="main")
  b1 = sch.get_block(name="root", func_name="main")
  sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
  sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSRSRS")
  l2, l3, l4, l5 = sch.get_loops(block=b0)
  save_sch_mod(sch)
  l6, l7 = sch.split(loop=l5, factors=[None, 4], preserve_unit_iters=True)
  l8, l9 = sch.split(loop=l4, factors=[None, 16], preserve_unit_iters=True)
  save_sch_mod(sch)
  l10, l11, l12, l13, l14, l15 = sch.get_loops(block=b0)
  sch.reorder(l14, l9, l7)
  save_sch_mod(sch)
  b16 = sch.blockize(target=l9, preserve_unit_iters=True)
  save_sch_mod(sch)
  sch.annotate(block_or_loop=b16, ann_key="meta_schedule.auto_tensorize", ann_val="dot_16x4_vnni")
  l17, l18, l19, l20 = sch.get_loops(block=b16)
  save_sch_mod(sch)
  v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l17, n=4, max_innermost_factor=64, decision=[3, 4, 1, 1])
  l25, l26, l27, l28 = sch.split(loop=l17, factors=[v21, v22, v23, v24], preserve_unit_iters=True)
  save_sch_mod(sch)
  v29, v30, v31, v32 = sch.sample_perfect_tile(loop=l18, n=4, max_innermost_factor=64, decision=[4, 2, 16, 1])
  l33, l34, l35, l36 = sch.split(loop=l18, factors=[v29, v30, v31, v32], preserve_unit_iters=True)
  save_sch_mod(sch)
  v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l19, n=4, max_innermost_factor=64, decision=[2, 2, 2, 1])
  l41, l42, l43, l44 = sch.split(loop=l19, factors=[v37, v38, v39, v40], preserve_unit_iters=True)
  save_sch_mod(sch)
  v45, v46 = sch.sample_perfect_tile(loop=l20, n=2, max_innermost_factor=64, decision=[4, 4])
  l47, l48 = sch.split(loop=l20, factors=[v45, v46], preserve_unit_iters=True)
  save_sch_mod(sch)
  sch.reorder(l25, l33, l41, l26, l34, l42, l47, l27, l35, l43, l48, l28, l36, l44)
  save_sch_mod(sch)
  b49 = sch.cache_write(block=b16, write_buffer_index=0, storage_scope="global")
  save_sch_mod(sch)
  sch.reverse_compute_at(block=b49, loop=l42, preserve_unit_loops=True, index=-1)
  save_sch_mod(sch)
  sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=64)
  sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
  v50 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
  sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v50)
  sch.enter_postproc()
  b51 = sch.get_block(name="root", func_name="main")
  sch.unannotate(block_or_loop=b51, ann_key="meta_schedule.parallel")
  sch.unannotate(block_or_loop=b51, ann_key="meta_schedule.vectorize")
  sch.unannotate(block_or_loop=b51, ann_key="meta_schedule.unroll_explicit")
  b52, b53, b54 = sch.get_child_blocks(b51)
  l55, l56, l57, l58, l59 = sch.get_loops(block=b52)
  l60 = sch.fuse(l55, l56, preserve_unit_iters=True)
  sch.parallel(loop=l60)
  l61 = sch.fuse(l59, preserve_unit_iters=True)
  sch.vectorize(loop=l61)
  l62, l63, l64, l65, l66, l67, l68, l69, l70, l71, l72, l73, l74, l75 = sch.get_loops(block=b53)
  l76 = sch.fuse(l62, l63, l64, l65, preserve_unit_iters=True)
  sch.parallel(loop=l76)
  sch.annotate(block_or_loop=l76, ann_key="pragma_auto_unroll_max_step", ann_val=16)
  sch.annotate(block_or_loop=l76, ann_key="pragma_unroll_explicit", ann_val=1)
  l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b54)
  l83 = sch.fuse(l82, preserve_unit_iters=True)
  sch.vectorize(loop=l83)
  b84 = sch.get_block(name="compute_o", func_name="main")
  l85, l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b84)
  b96 = sch.decompose_reduction(block=b84, loop=l88)
  sch.unannotate(block_or_loop=b96, ann_key="meta_schedule.auto_tensorize")
  sch.annotate(block_or_loop=b96, ann_key="meta_schedule.auto_tensorize", ann_val="")
  b97 = sch.get_block(name="compute_o_init", func_name="main")
  sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.auto_tensorize")
  b98, = sch.get_child_blocks(b97)
  l99, = sch.get_loops(block=b98)
  sch.vectorize(loop=l99)
  b100 = sch.get_block(name="compute_o_update", func_name="main")
  sch.unannotate(block_or_loop=b100, ann_key="meta_schedule.auto_tensorize")
  sch.tensorize(block_or_loop=b100, tensor_intrin="dot_16x4_vnni", preserve_unit_iters=True)